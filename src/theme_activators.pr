{[ let brand = ds.currentBrand() /]}
{[ let assetGroups = ds.allAssetGroups(brand.id) /]}
{[ let resolvedAssetGroups = [] /]}
{[ for group in assetGroups ]}
    {[ if (group.name.contains("Icons")) ]}
        {[ for subgroup in group.subgroups ]}
            {[ let resolvedAssets = [] /]}
            {[ for assetId in subgroup.assetIds ]}
                {[ let asset = ds.assetById(assetId) /]}
                {[ resolvedAssets = resolvedAssets.append(asset) /]}
            {[/]}
            {[ if (resolvedAssets.count() > 0) ]}
                {[ resolvedAssetGroups = resolvedAssetGroups.append({ "groupName": group.name, "icons": resolvedAssets }) /]}
            {[/]}
        {[/]}
    {[/]}
{[/]}
{[ let themes = getAllThemes(resolvedAssetGroups) /]}
{[ for theme in themes ]}
    {[ let path = getActivatorPathForTheme(theme) /]}
    {[ emit file path ]}
// Generated by Supernova, do not modify
{{ importsForTheme(theme) }}

/// Activator for setting the {{ theme }} theme as the source for icon definitions.
///
/// Only a single theme can be active at one time, as the icon source is a global singleton.
public class Prism{{ theme }}IconActivator {
    private init() {}

    /// Activates the {{ theme }} theme as the source for icon definitions.
    ///
    /// Sets {{ theme }} as the currently activated theme. This will cause any icons assets packaged with the theme to be used when rendering icons. 
    public static func activate() {
        PrismIconSource.activate(theme: Prism{{ theme }}IconProvider())
    }
}

    {[/]}
{[/]}
