{[ let brand = ds.currentBrand() /]}
{[ let assetGroups = ds.allAssetGroups(brand.id) /]}
{[ let resolvedAssetGroups = [] /]}
{[ for group in assetGroups ]}
    {[ if (group.name.contains("Icons")) ]}
        {[ for subgroup in group.subgroups ]}
            {[ let resolvedAssets = [] /]}
            {[ for assetId in subgroup.assetIds ]}
                {[ let asset = ds.assetById(assetId) /]}
                {[ resolvedAssets = resolvedAssets.append(asset) /]}
            {[/]}
            {[ if (resolvedAssets.count() > 0) ]}
                {[ resolvedAssetGroups = resolvedAssetGroups.append({ "groupName": group.name, "icons": resolvedAssets }) /]}
            {[/]}
        {[/]}
    {[/]}
{[/]}
{[ let themes = getAllThemes(resolvedAssetGroups) /]}
{[ for theme in themes ]}
    {[ let path = getProviderPathForTheme(theme) /]}
    {[ emit file path ]}
// Generated by Supernova, do not modify
{{ importsForTheme(theme) }}

/// The icon provider for the {{ theme }} theme.
///
/// This class is used to provide the icons for the {{ theme }} theme.
{{ visibilityForProvider(theme) }}class Prism{{ theme }}IconProvider: PrismIconProvider {
    
    /// The bundle for referencing icons in the {{ theme }} theme
    {{ visibilityForProvider(theme) }}static var iconBundle = Bundle.previewCompatibleBundle(bundleName: "{{ bundleNameForTheme(theme) }}")
    
    /// The bundle for referencing icons in the {{ theme }} theme
    {{ visibilityForProvider(theme) }}var iconBundle: Bundle {
        return Prism{{ theme }}IconProvider.iconBundle
    }

    /// The name of the {{ theme }} theme
    {{ visibilityForProvider(theme) }}var name: String {
        return "{{ theme }}"
    }
}

private class BundleFinder {}

extension Foundation.Bundle {
    
    /// Returns the resource bundle associated with the current Swift module.
    static func previewCompatibleBundle(bundleName: String) -> Bundle {
        let candidates = [
            // Bundle should be present here when the package is linked into an App.
            Bundle.main.resourceURL,
            
            // Bundle should be present here when the package is linked into a framework.
            Bundle(for: BundleFinder.self).resourceURL,
            
            // For command-line tools.
            Bundle.main.bundleURL,
            
            // Bundle should be present here when running previews from a different package (this is the path to "â€¦/Debug-iphonesimulator/").
            Bundle(for: BundleFinder.self).resourceURL?.deletingLastPathComponent().deletingLastPathComponent().deletingLastPathComponent(),
            Bundle(for: BundleFinder.self).resourceURL?.deletingLastPathComponent().deletingLastPathComponent(),
        ]
        
        for candidate in candidates {
            let bundlePath = candidate?.appendingPathComponent(bundleName + ".bundle")
            if let bundle = bundlePath.flatMap(Bundle.init(url:)) {
                return bundle
            }
        }
        fatalError("unable to find bundle named \(bundleName), ensure you've imported the correct theme target")
    }
}

    {[/]}
{[/]}
