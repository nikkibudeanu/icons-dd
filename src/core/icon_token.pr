// Generated by Supernova, DO NOT MODIFY

import Foundation
import UIKit
import SwiftUI

{[ let brand = ds.currentBrand() /]}
{[ let assetGroups = ds.allAssetGroups(brand.id) /]}
{[ let resolvedAssetGroups = [] /]}
{[ for group in assetGroups ]}
    {[ if (group.name.contains("Icons")) ]}
        {[ for subgroup in group.subgroups ]}
            {[ let resolvedAssets = [] /]}
            {[ for assetId in subgroup.assetIds ]}
                {[ let asset = ds.assetById(assetId) /]}
                {[ resolvedAssets = resolvedAssets.append(asset) /]}
            {[/]}
            {[ if (resolvedAssets.count() > 0) ]}
                {[ resolvedAssetGroups = resolvedAssetGroups.append({ "groupName": group.name, "icons": resolvedAssets }) /]}
            {[/]}
        {[/]}
    {[/]}
{[/]}

{[ let defaultIcons = getDefaultIconSet(resolvedAssetGroups) /]}

/// The size variants available for a particular icon
public enum IconVariant: String, CaseIterable {

    /// The small case, 16x16
    case small
    /// The large case, 24x24
    case large
    /// Both small and large sizes are available
    case both

    /// Provides the asset catalog path element for the variant
    public var path: String {
        switch self {
        case .small: return "16"
        default: return "24"
        }
    }
}

/// Defines an icon token with a reference to name, variant (size), and rendering mode.
///
/// This structure is used to reference an icon in various Prism components without coupling them directly to the image.
public struct IconToken: CaseIterable, Hashable {

    /// The size variant of the icon.
    public let variant: IconVariant

    /// The asset catalog name of the icon.
    public let name: String

    /// The rendering mode of the icon.
    public let renderingMode: Image.TemplateRenderingMode

    /// All icon token cases.
    public static var allCases: [IconToken] {
        return [
{[ for icon in defaultIcons ]}
            .{{ lowercaseFirstLetter(icon.name) }},
{[/]}
        ]
    }

{[ for icon in defaultIcons ]}
    /// The token for {{ lowercaseFirstLetter(icon.name )}}
    public static let {{ lowercaseFirstLetter(icon.name) }} = IconToken(variant: {{ variantsForIcon(icon) }}, name: "{{ assetNameForIcon(icon) }}", renderingMode: {{ renderingModeForIcon(icon) }})
{[/]}

    /// Retrieve a `Image` representation of the icon token
    ///
    /// If the variant supplied is not available for the token or the icon is not found, returns an empty image.
    ///
    /// - Parameter variant: The size variant of the icon. Defaults to `.large`.
    /// - Parameter overriddenDimension: The dimension to use for the image. If left `nil`, the image will use the default size for the variant (16x16 for .small, 24x24 for .large).
    /// - Returns: The `Image` representation of the icon token.
    public func image(variant: IconVariant = .large, overriddenDimension: CGFloat? = nil) -> Image {
        Image(uiImage: uiImage(variant: variant, overriddenDimension: overriddenDimension))
    }

    /// Retrieve a `UIImage` representation of the icon token
    ///
    /// If the variant supplied is not available for the token or the icon is not found, returns an empty image.
    ///
    /// - Parameter variant: The size variant of the icon.
    /// - Parameter overriddenDimension: The dimension to use for the image. If left `nil`, the image will use the default size for the variant (16x16 for .small, 24x24 for .large).
    /// - Returns: The `UIImage` representation of the icon token.
    public func uiImage(variant: IconVariant = .large, overriddenDimension: CGFloat? = nil) -> UIImage {
        guard self.variant == .both || (self.variant == .large && variant == .large) else {
            return UIImage()
        }

        let cacheKey = "\(PrismIconSource.shared.theme.name)\(name).\(variant.path).\(String(describing: renderingMode))"
        if let image = IconImageCache.cache.object(forKey: cacheKey as NSString) {
            if let dimension = overriddenDimension {
                return image.resized(maxDimension: dimension)
            }
            return image
        }

        let imageName = "\(variant.path)/\(name)"
        let image = (UIImage(named: imageName,
                             in: PrismIconSource.shared.theme.iconBundle,
                             compatibleWith: nil) ??
                UIImage(named: imageName,
                        in: PrismDefaultIconProvider.iconBundle,
                        compatibleWith: nil))?.withRenderingMode(renderingMode == .original ? .alwaysOriginal : .alwaysTemplate)
        
        if let image = image {
            IconImageCache.cache.setObject(image, forKey: cacheKey as NSString)
            if let dimension = overriddenDimension {
                return image.resized(maxDimension: dimension)
            }
            return image
        } else {
            return UIImage()
        }
    }
}

public extension IconToken {
    /// Initializes a token with a fully qualified name.
    ///
    /// The `backendDrivenName` contains all of the information needed to
    /// find the token. The format for this value is:
    ///
    /// ```swift
    /// {icon name component}/{icon name component}/{icon size}
    /// {icon name component}-{icon name component}-{icon name component}/{icon size}
    /// {icon name component}_{icon name component}_{icon name component}/{icon size}
    /// ```
    ///
    /// This function has been expanded to handle the following separator characters 
    /// for the icon token name: `/`, `-`, `_`.
    ///
    /// - `icon name` is the name of the icon excluding size (`large` or `small`)
    /// - `icon size` is a number: `16` for `small` icons. All other values,
    /// including `nil` will result in a default icon size available for the icon name.
    ///
    /// Examples:
    /// ```swift
    /// add/square/line // icon for add-square-line with available variants
    /// add-square-line // icon for add-square-line with available variants
    /// add_square_line // icon for add-square-line with available variants
    /// add/square/line/16 // small icon if this variant is available
    /// ```
    ///
    /// This format can be used on both Android and iOS to reference an icon.
    ///
    /// - Parameters:
    ///   - backendDrivenName: The fully qualified token name.
    ///   - renderingMode: Allows the ability to override the renderingMode of the icon. If left `nil` the icon will use its default rendering mode defined by the catalog entry.
    init?(backendDrivenName: String, renderingMode: Image.TemplateRenderingMode? = nil) {
        let components = backendDrivenName.components(separatedBy: CharacterSet(charactersIn: "/-_"))
        let size = CGFloat(Int(components.last ?? "") ?? 0)
        let sizeIsPresent = size != 0 || components.last?.count == 2
        let iconName = sizeIsPresent
            ? components.dropLast().joined(separator: "-")
            : components.joined(separator: "-")
        
        guard let foundIcon = IconToken(name: iconName) else {
            return nil
        }
        
        if !sizeIsPresent && renderingMode == nil {
            self = foundIcon
        } else {
            self = IconToken(
                variant: size == 16 ? .both : .large,
                name: iconName,
                renderingMode: renderingMode ?? iconName.renderingModeForIconName()
            )
        }
    }

    /// Initializes a token with a name.
    ///
    /// The name should follow the format of words separated by dashes.
    /// Examples:
    /// ```swift
    /// "add-square-line"
    /// "deals-fill"
    /// "number-1-line"
    /// ```
    ///
    /// The return token will be configured with the sizes available in the asset catalog. If no matching name is found, the init will return nil.
    ///
    /// - Parameters:
    ///   - name: The name of the icon.
    init?(name: String) {
        switch name {
{[ for icon in defaultIcons ]}
        case "{{ assetNameForIcon(icon) }}": self = .{{ lowercaseFirstLetter(icon.name) }}

{[/]}
        default: return nil
        }
    }
}

private extension String {
    func renderingModeForIconName() -> Image.TemplateRenderingMode {
        let lowercaseName = self.lowercased()
        return ((lowercaseName.contains("-color") || lowercaseName.contains("logo-")) && !lowercaseName.contains("-monocolor")) ? .original : .template
    }
}

private class IconImageCache {
    static var cache = NSCache<NSString, UIImage>()
}

private extension UIImage {

    func resized(maxDimension: CGFloat) -> UIImage {
        var newSize: CGSize
        if size.width >= size.height {
            guard size.width > maxDimension else { return self }
            newSize = CGSize(width: maxDimension, height: maxDimension * size.height / size.width)
        } else {
            guard size.height > maxDimension else { return self }
            newSize = CGSize(width: maxDimension * size.width / size.height, height: maxDimension)
        }
        
        UIGraphicsBeginImageContextWithOptions(newSize, false, 0.0)
        draw(in: CGRect(origin: .zero, size: newSize))
        let newImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        return newImage ?? self
    }
}

